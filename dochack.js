/* Generated by the Nim Compiler v0.19.9 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI40032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI188074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI43862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190532 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI78448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI78205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI78283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI78281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI78227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI78565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI78563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI78561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI78231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI78229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI80245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI43850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI40006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI58141 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI43808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43914 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI40016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI40040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI40042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI43908 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI43826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI43846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI43846.node = NNI43846;
var NNI43842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI43842.node = NNI43842;
var NNI43828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI43828.node = NNI43828;
NTI43908.base = NTI43826;
NTI43914.base = NTI43826;
var NNI43826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI43908, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI40042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI40040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI40040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI40016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI43914, name: "up", sons: null}]};
NTI43826.node = NNI43826;
var NNI43808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI43808.node = NNI43808;
NTI43826.base = NTI43808;
NTI43828.base = NTI43826;
NTI43842.base = NTI43828;
NTI43846.base = NTI43842;
var NNI58141 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI40042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI40006, name: "Field1", sons: null}]};
NTI58141.node = NNI58141;
var NNI43858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI43858.node = NNI43858;
NTI43858.base = NTI43828;
var NNI43850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI43850.node = NNI43850;
NTI43850.base = NTI43828;
NTI78561.base = NTI78229;
NTI78563.base = NTI78229;
NTI78565.base = NTI78229;
var NNI78227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI78227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI78227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI78227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI78227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI78227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI78227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI78227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI78227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI78227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI78227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI78227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI78227, name: "NotationNode", len: 0, sons: null}}};
NTI78227.node = NNI78227;
var NNI78283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI40042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI40042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI40042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI40042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI40042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI40042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI40042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI40042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI40042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI40042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI40042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI40042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI40042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI40042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI40042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI40042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI40042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI40042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI40042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI40042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI40042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI40042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI40042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI40042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI40042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI40042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI40042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI40042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI40042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI40042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI40042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI40042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI40042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI40042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI40042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI40042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI40042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI40042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI40042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI40042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI40042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI40042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI40042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI40042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI40042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI40042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI40042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI40042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI40042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI40042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI40042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI40042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI40042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI40042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI40042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI40042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI40042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI40042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI40042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI40042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI40042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI40042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI40042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI40042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI40042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI40042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI40042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI40042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI40042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI40042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI40042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI40042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI40042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI40042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI40042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI40042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI40042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI40042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI40042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI40042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI40042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI40042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI40042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI40042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI40042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI40042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI40042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI40042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI40042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI40042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI40006, name: "zIndex", sons: null}]};
NTI78283.node = NNI78283;
NTI78283.base = NTI43808;
NTI78281.base = NTI78283;
var NNI78231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI78561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI78563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI78565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI40042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI78229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI78229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI78229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI40042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI78227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI40042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI78229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI78229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI40042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI78281, name: "style", sons: null}]};
NTI78231.node = NNI78231;
var NNI78205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI78372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI78376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI78380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI78384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI78388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI78392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI78396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI78400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI78404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI78408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI78412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI78416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI78420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI78424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI78428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI78432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI78436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI78440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI78444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI78448, name: "onunload", sons: null}]};
NTI78205.node = NNI78205;
NTI78205.base = NTI43808;
NTI78231.base = NTI78205;
NTI78229.base = NTI78231;
NTI80245.base = NTI78229;
NTI190532.base = NTI40042;
var NNI43862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI43862.node = NNI43862;
NTI43862.base = NTI43828;
var NNI188074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI40006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI40032, name: "Field1", sons: null}]};
NTI188074.node = NNI188074;

function makeNimstrLit(c_60038) {
		  var ln = c_60038.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_60038.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_61027, src_61028, ti_61029) {
	var result_61219 = null;

		switch (ti_61029.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_61001(ti_61029))) {
			result_61219 = src_61028;
			}
			else {
				result_61219 = [src_61028[0], src_61028[1]];
			}
			
			break;
		case 19:
			      if (dest_61027 === null || dest_61027 === undefined) {
        dest_61027 = {};
      }
      else {
        for (var key in dest_61027) { delete dest_61027[key]; }
      }
      for (var key in src_61028) { dest_61027[key] = src_61028[key]; }
      result_61219 = dest_61027;
    
			break;
		case 18:
		case 17:
			if (!((ti_61029.base == null))) {
			result_61219 = nimCopy(dest_61027, src_61028, ti_61029.base);
			}
			else {
			if ((ti_61029.kind == 17)) {
			result_61219 = (dest_61027 === null || dest_61027 === undefined) ? {m_type: ti_61029} : dest_61027;
			}
			else {
				result_61219 = (dest_61027 === null || dest_61027 === undefined) ? {} : dest_61027;
			}
			}
			nimCopyAux(result_61219, src_61028, ti_61029.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_61028 === null) {
        result_61219 = null;
      }
      else {
        if (dest_61027 === null || dest_61027 === undefined) {
          dest_61027 = new Array(src_61028.length);
        }
        else {
          dest_61027.length = src_61028.length;
        }
        result_61219 = dest_61027;
        for (var i = 0; i < src_61028.length; ++i) {
          result_61219[i] = nimCopy(result_61219[i], src_61028[i], ti_61029.base);
        }
      }
    
			break;
		case 28:
			      if (src_61028 !== null) {
        result_61219 = src_61028.slice(0);
      }
    
			break;
		default: 
			result_61219 = src_61028;
			break;
		}

	return result_61219;

}

function arrayConstr(len_61271, value_61272, typ_61273) {
		    var result = new Array(len_61271);
    for (var i = 0; i < len_61271; ++i) result[i] = nimCopy(null, value_61272, typ_61273);
    return result;
  

	
}

function cstrToNimstr(c_60055) {
		  var ln = c_60055.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_60055.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_60055.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_60072) {
		  if (s_60072 === null) return "";
  var len = s_60072.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_60072[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_60072[i] < 128)
      asciiPart[i] = fcc(s_60072[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_58618, ename_58619) {
		e_58618.name = ename_58619;
		if ((excHandler == 0)) {
		unhandledException(e_58618);
		}
		
		e_58618.trace = nimCopy(null, raw_write_stack_trace_58438(), NTI40040);
		throw e_58618;

	
}

function addInt(a_60403, b_60404) {
		    var result = a_60403 + b_60404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_61290, a_61291, b_61292) {
			var Tmp1;

	var result_61293 = 0;

	BeforeRet: do {
			if (!(a_61291 <= i_61290)) Tmp1 = false; else {				Tmp1 = (i_61290 <= b_61292);			}		if (Tmp1) {
		result_61293 = i_61290;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_61290, a_61291, b_61292);
		}
		
	} while (false);

	return result_61293;

}

function subInt(a_60421, b_60422) {
		    var result = a_60421 - b_60422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_61309, a_61310, b_61311) {
			var Tmp1;

	var result_61312 = 0;

	BeforeRet: do {
			if (!(a_61310 <= i_61309)) Tmp1 = false; else {				Tmp1 = (i_61309 <= b_61311);			}		if (Tmp1) {
		result_61312 = i_61309;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_61312;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_60439, b_60440) {
		    var result = a_60439 * b_60440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_60758, b_60759) {
		var Tmp1;

	var result_60760 = 0;

	BeforeRet: do {
		if ((b_60759 <= a_60758)) {
		Tmp1 = a_60758;
		}
		else {
		Tmp1 = b_60759;
		}
		
		result_60760 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_60760;

}

function nimMin(a_60740, b_60741) {
		var Tmp1;

	var result_60742 = 0;

	BeforeRet: do {
		if ((a_60740 <= b_60741)) {
		Tmp1 = a_60740;
		}
		else {
		Tmp1 = b_60741;
		}
		
		result_60742 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_60742;

}
var nim_program_result = 0;
var global_raise_hook_55818 = [null];
var local_raise_hook_55823 = [null];
var out_of_mem_hook_55826 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_190285 = [null];

function is_fat_pointer_61001(ti_61003) {
	var result_61004 = false;

	BeforeRet: do {
		result_61004 = !((ConstSet1[ti_61003.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_61004;

}

function nimCopyAux(dest_61032, src_61033, n_61035) {
		switch (n_61035.kind) {
		case 0:
			break;
		case 1:
			      dest_61032[n_61035.offset] = nimCopy(dest_61032[n_61035.offset], src_61033[n_61035.offset], n_61035.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_61035.sons.length; i++) {
      nimCopyAux(dest_61032, src_61033, n_61035.sons[i]);
    }
    
			break;
		case 3:
			      dest_61032[n_61035.offset] = nimCopy(dest_61032[n_61035.offset], src_61033[n_61035.offset], n_61035.typ);
      for (var i = 0; i < n_61035.sons.length; ++i) {
        nimCopyAux(dest_61032, src_61033, n_61035.sons[i][1]);
      }
    
			break;
		}

	
}

function add_55838(x_55841, x_55841_Idx, y_55842) {
		      if (x_55841[x_55841_Idx] === null) { x_55841[x_55841_Idx] = []; }
      var off = x_55841[x_55841_Idx].length;
      x_55841[x_55841_Idx].length += y_55842.length;
      for (var i = 0; i < y_55842.length; ++i) {
        x_55841[x_55841_Idx][off+i] = y_55842.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_58136(f_58138) {
					var Tmp3;

	var result_58139 = [null];

		var it_58147 = f_58138;
		var i_58149 = 0;
		var total_58151 = 0;
		var temp_frames_58158 = arrayConstr(64, {Field0: null, Field1: 0}, NTI58141);
		L1: do {
				L2: while (true) {
					if (!!((it_58147 == null))) Tmp3 = false; else {						Tmp3 = (i_58149 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_58158[i_58149].Field0 = it_58147.procname;
					temp_frames_58158[i_58149].Field1 = it_58147.line;
					i_58149 += 1;
					total_58151 += 1;
					it_58147 = it_58147.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_58147 == null))) break L5;
					total_58151 += 1;
					it_58147 = it_58147.prev;
				}
		} while(false);
		result_58139[0] = nimCopy(null, [], NTI40040);
		if (!((total_58151 == i_58149))) {
		if (result_58139[0] != null) { result_58139[0] = (result_58139[0]).concat(makeNimstrLit("(")); } else { result_58139[0] = makeNimstrLit("("); };
		if (result_58139[0] != null) { result_58139[0] = (result_58139[0]).concat(cstrToNimstr(((total_58151 - i_58149))+"")); } else { result_58139[0] = cstrToNimstr(((total_58151 - i_58149))+"").slice(); };
		if (result_58139[0] != null) { result_58139[0] = (result_58139[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_58139[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_58421 = 0;
			var colontmp__190426 = 0;
			colontmp__190426 = (i_58149 - 1);
			var res_190431 = colontmp__190426;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_190431)) break L8;
						j_58421 = res_190431;
						add_55838(result_58139, 0, temp_frames_58158[j_58421].Field0);
						if ((0 < temp_frames_58158[j_58421].Field1)) {
						if (result_58139[0] != null) { result_58139[0] = (result_58139[0]).concat(makeNimstrLit(", line: ")); } else { result_58139[0] = makeNimstrLit(", line: "); };
						if (result_58139[0] != null) { result_58139[0] = (result_58139[0]).concat(cstrToNimstr((temp_frames_58158[j_58421].Field1)+"")); } else { result_58139[0] = cstrToNimstr((temp_frames_58158[j_58421].Field1)+"").slice(); };
						}
						
						if (result_58139[0] != null) { result_58139[0] = (result_58139[0]).concat(makeNimstrLit("\x0A")); } else { result_58139[0] = makeNimstrLit("\x0A"); };
						res_190431 -= 1;
					}
			} while(false);
		} while(false);

	return result_58139[0];

}

function raw_write_stack_trace_58438() {
	var result_58440 = null;

		if (!((framePtr == null))) {
		result_58440 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_58136(framePtr) || []), NTI40040);
		}
		else {
			result_58440 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI40040);
		}
		

	return result_58440;

}

function unhandledException(e_58499) {
		var buf_58500 = [[]];
		if (!(((e_58499.message != null ? e_58499.message.length : 0) == 0))) {
		if (buf_58500[0] != null) { buf_58500[0] = (buf_58500[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_58500[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_58500[0] != null) { buf_58500[0] = (buf_58500[0]).concat(e_58499.message); } else { buf_58500[0] = e_58499.message.slice(); };
		}
		else {
		if (buf_58500[0] != null) { buf_58500[0] = (buf_58500[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_58500[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_58500[0] != null) { buf_58500[0] = (buf_58500[0]).concat(makeNimstrLit(" [")); } else { buf_58500[0] = makeNimstrLit(" ["); };
		add_55838(buf_58500, 0, e_58499.name);
		if (buf_58500[0] != null) { buf_58500[0] = (buf_58500[0]).concat(makeNimstrLit("]\x0A")); } else { buf_58500[0] = makeNimstrLit("]\x0A"); };
		if (buf_58500[0] != null) { buf_58500[0] = (buf_58500[0]).concat(raw_write_stack_trace_58438()); } else { buf_58500[0] = raw_write_stack_trace_58438().slice(); };
		var cbuf_58601 = toJSStr(buf_58500[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_58601);
  }
  else {
    throw cbuf_58601;
  }
  

	
}

function raiseOverflow() {
		var e_59026 = null;
		e_59026 = {m_type: NTI43846, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_59026.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI40040);
		e_59026.parent = null;
		raiseException(e_59026, "OverflowError");

	
}

function is_whitespace_189639(text_189641) {
		     return !/[^\s]/.test(text_189641);
  

	
}

function is_whitespace_189656(x_189658) {
		var Tmp1;
		var Tmp2;

	var result_189659 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_189658.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_189639(x_189658.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_189658.nodeName == "#comment");		}		result_189659 = Tmp1;
	framePtr = F.prev;

	return result_189659;

}

function raiseIndexError(i_59623, a_59624, b_59625) {
		var e_59629 = null;
		e_59629 = {m_type: NTI43858, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_59629.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_59623)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_59624)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_59625)+"") || []), NTI40040);
		e_59629.parent = null;
		raiseException(e_59629, "IndexError");

	
}

function to_toc_189673(x_189675, father_189676) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_189675.nodeName == "UL")) {
		F.line = 139;
		var f_189695 = {heading: null, kids: [], sortId: (father_189676.kids != null ? father_189676.kids.length : 0), doSort: false};
		F.line = 140;
		var i_189697 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_189697 < x_189675.childNodes.length)) break L2;
					F.line = 142;
					var nxt_189698 = addInt(i_189697, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_189698 < x_189675.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_189656(x_189675.childNodes[nxt_189698]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_189698 = addInt(nxt_189698, 1);
							}
					} while(false);
						if (!(nxt_189698 < x_189675.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_189675.childNodes[i_189697].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_189675.childNodes[i_189697].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_189675.childNodes[nxt_189698].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_189723 = {heading: x_189675.childNodes[i_189697].childNodes[0], kids: [], sortId: (f_189695.kids != null ? f_189695.kids.length : 0), doSort: false};
					F.line = 148;
					var it_189724 = x_189675.childNodes[nxt_189698];
					L9: do {
						F.line = 149;
						var j_189731 = 0;
						F.line = 2217;
						var colontmp__190402 = 0;
						F.line = 149;
						colontmp__190402 = it_189724.childNodes.length;
						F.line = 2218;
						var i_190403 = 0;
						L10: do {
							F.line = 2219;
								L11: while (true) {
								if (!(i_190403 < colontmp__190402)) break L11;
									F.line = 149;
									j_189731 = i_190403;
									F.line = 150;
									to_toc_189673(it_189724.childNodes[j_189731], e_189723);
									F.line = 2221;
									i_190403 = addInt(i_190403, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_189695.kids != null) { f_189695.kids.push(e_189723); } else { f_189695.kids = [e_189723]; };
					F.line = 152;
					i_189697 = addInt(nxt_189698, 1);
					}
					else {
						F.line = 154;
						to_toc_189673(x_189675.childNodes[i_189697], f_189695);
						F.line = 155;
						i_189697 = addInt(i_189697, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_189676.kids != null) { father_189676.kids.push(f_189695); } else { father_189676.kids = [f_189695]; };
		}
		else {
		if (is_whitespace_189656(x_189675)) {
		}
		else {
		if ((x_189675.nodeName == "LI")) {
		F.line = 160;
		var idx_189766 = [];
		L12: do {
			F.line = 161;
			var i_189773 = 0;
			F.line = 2217;
			var colontmp__190407 = 0;
			F.line = 161;
			colontmp__190407 = x_189675.childNodes.length;
			F.line = 2218;
			var i_190408 = 0;
			L13: do {
				F.line = 2219;
					L14: while (true) {
					if (!(i_190408 < colontmp__190407)) break L14;
						F.line = 161;
						i_189773 = i_190408;
						if (!(is_whitespace_189656(x_189675.childNodes[i_189773]))) {
						F.line = 162;
						if (idx_189766 != null) { idx_189766.push(i_189773); } else { idx_189766 = [i_189773]; };
						}
						
						F.line = 2221;
						i_190408 = addInt(i_190408, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_189766 != null ? idx_189766.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_189675.childNodes[idx_189766[chckIndx(1, 0, idx_189766.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_189804 = {heading: x_189675.childNodes[idx_189766[chckIndx(0, 0, idx_189766.length+0-1)-0]], kids: [], sortId: (father_189676.kids != null ? father_189676.kids.length : 0), doSort: false};
		F.line = 166;
		var it_189805 = x_189675.childNodes[idx_189766[chckIndx(1, 0, idx_189766.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_189812 = 0;
			F.line = 2217;
			var colontmp__190413 = 0;
			F.line = 167;
			colontmp__190413 = it_189805.childNodes.length;
			F.line = 2218;
			var i_190414 = 0;
			L17: do {
				F.line = 2219;
					L18: while (true) {
					if (!(i_190414 < colontmp__190413)) break L18;
						F.line = 167;
						j_189812 = i_190414;
						F.line = 168;
						to_toc_189673(it_189805.childNodes[j_189812], e_189804);
						F.line = 2221;
						i_190414 = addInt(i_190414, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_189676.kids != null) { father_189676.kids.push(e_189804); } else { father_189676.kids = [e_189804]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_189826 = 0;
				F.line = 2217;
				var colontmp__190418 = 0;
				F.line = 171;
				colontmp__190418 = x_189675.childNodes.length;
				F.line = 2218;
				var i_190419 = 0;
				L20: do {
					F.line = 2219;
						L21: while (true) {
						if (!(i_190419 < colontmp__190418)) break L21;
							F.line = 171;
							i_189826 = i_190419;
							F.line = 172;
							to_toc_189673(x_189675.childNodes[i_189826], father_189676);
							F.line = 2221;
							i_190419 = addInt(i_190419, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_189676.kids != null) { father_189676.kids.push({heading: x_189675, kids: [], sortId: (father_189676.kids != null ? father_189676.kids.length : 0), doSort: false}); } else { father_189676.kids = [{heading: x_189675, kids: [], sortId: (father_189676.kids != null ? father_189676.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_189307(x_189309, heading_189310, items_189313, items_189313_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_189309 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_189309.heading == null))) Tmp1 = false; else {				Tmp1 = (x_189309.heading.textContent == heading_189310);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_189341 = 0;
			F.line = 2217;
			var colontmp__190443 = 0;
			F.line = 83;
			colontmp__190443 = (x_189309.kids != null ? x_189309.kids.length : 0);
			F.line = 2218;
			var i_190444 = 0;
			L3: do {
				F.line = 2219;
					L4: while (true) {
					if (!(i_190444 < colontmp__190443)) break L4;
						F.line = 83;
						i_189341 = i_190444;
						F.line = 84;
						if (items_189313[items_189313_Idx] != null) { items_189313[items_189313_Idx].push(x_189309.kids[chckIndx(i_189341, 0, x_189309.kids.length+0-1)-0].heading); } else { items_189313[items_189313_Idx] = [x_189309.kids[chckIndx(i_189341, 0, x_189309.kids.length+0-1)-0].heading]; };
						F.line = 2221;
						i_190444 = addInt(i_190444, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_189360 = 0;
				F.line = 2217;
				var colontmp__190448 = 0;
				F.line = 86;
				colontmp__190448 = (x_189309.kids != null ? x_189309.kids.length : 0);
				F.line = 2218;
				var i_190449 = 0;
				L6: do {
					F.line = 2219;
						L7: while (true) {
						if (!(i_190449 < colontmp__190448)) break L7;
							F.line = 86;
							i_189360 = i_190449;
							F.line = 87;
							var it_189361 = x_189309.kids[chckIndx(i_189360, 0, x_189309.kids.length+0-1)-0];
							F.line = 88;
							extract_items_189307(it_189361, heading_189310, items_189313, items_189313_Idx);
							F.line = 2221;
							i_190449 = addInt(i_190449, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_189020(tag_189022, kids_189024) {
	var result_189025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_189025 = document.createElement(toJSStr(tag_189022));
		L1: do {
			F.line = 12;
			var k_189056 = null;
			F.line = 3;
			var i_190466 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_190466 < (kids_189024 != null ? kids_189024.length : 0))) break L3;
						F.line = 12;
						k_189056 = kids_189024[chckIndx(i_190466, 0, kids_189024.length+0-1)-0];
						F.line = 13;
						result_189025.appendChild(k_189056);
						F.line = 6;
						i_190466 = addInt(i_190466, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_189025;

}

function text_189122(s_189124) {
	var result_189125 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_189125 = document.createTextNode(s_189124);
	framePtr = F.prev;

	return result_189125;

}

function sys_fatal_52818(message_52822) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../lib/system/fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_53002 = null;
		F.line = 35;
		e_53002 = {m_type: NTI43850, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 36;
		e_53002.message = nimCopy(null, message_52822, NTI40040);
		F.line = 37;
		raiseException(e_53002, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_52814(msg_52816) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 8;
		sys_fatal_52818(msg_52816);
	framePtr = F.prev;

	
}

function failed_assert_impl_53035(msg_53037) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 15;
		raise_assert_52814(msg_53037);
	framePtr = F.prev;

	
}

function uncovered_189920(x_189922) {
			var Tmp1;
		var Tmp2;

	var result_189923 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_189922.kids != null ? x_189922.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_189922.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_189922.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_189922;
		}
		else {
		Tmp2 = null;
		}
		
		result_189923 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_189923 = {heading: x_189922.heading, kids: [], sortId: x_189922.sortId, doSort: x_189922.doSort};
		L3: do {
			F.line = 197;
			var i_189961 = 0;
			F.line = 2217;
			var colontmp__190478 = 0;
			F.line = 197;
			colontmp__190478 = (x_189922.kids != null ? x_189922.kids.length : 0);
			F.line = 2218;
			var i_190479 = 0;
			L4: do {
				F.line = 2219;
					L5: while (true) {
					if (!(i_190479 < colontmp__190478)) break L5;
						F.line = 197;
						i_189961 = i_190479;
						F.line = 198;
						var y_189962 = uncovered_189920(x_189922.kids[chckIndx(i_189961, 0, x_189922.kids.length+0-1)-0]);
						if (!((y_189962 == null))) {
						F.line = 199;
						if (result_189923.kids != null) { result_189923.kids.push(y_189962); } else { result_189923.kids = [y_189962]; };
						}
						
						F.line = 2221;
						i_190479 = addInt(i_190479, 1);
					}
			} while(false);
		} while(false);
		if (((result_189923.kids != null ? result_189923.kids.length : 0) == 0)) {
		F.line = 200;
		result_189923 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_189923;

}

function merge_tocs_189996(orig_189998, news_189999) {
	var result_190000 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_190000 = uncovered_189920(orig_189998);
		if ((result_190000 == null)) {
		F.line = 205;
		result_190000 = news_189999;
		}
		else {
			L1: do {
				F.line = 207;
				var i_190020 = 0;
				F.line = 2217;
				var colontmp__190472 = 0;
				F.line = 207;
				colontmp__190472 = (news_189999.kids != null ? news_189999.kids.length : 0);
				F.line = 2218;
				var i_190473 = 0;
				L2: do {
					F.line = 2219;
						L3: while (true) {
						if (!(i_190473 < colontmp__190472)) break L3;
							F.line = 207;
							i_190020 = i_190473;
							F.line = 208;
							if (result_190000.kids != null) { result_190000.kids.push(news_189999.kids[chckIndx(i_190020, 0, news_189999.kids.length+0-1)-0]); } else { result_190000.kids = [news_189999.kids[chckIndx(i_190020, 0, news_189999.kids.length+0-1)-0]]; };
							F.line = 2221;
							i_190473 = addInt(i_190473, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_190000;

}

function build_toc_190041(orig_190043, types_190045, procs_190046) {
	var result_190047 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_190061 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_190214 = null;
			F.line = 155;
			var i_190461 = 0;
			F.line = 156;
			var l_190462 = (types_190045 != null ? types_190045.length : 0);
			L2: do {
				F.line = 157;
					L3: while (true) {
					if (!(i_190461 < l_190462)) break L3;
						F.line = 212;
						t_190214 = types_190045[chckIndx(i_190461, 0, types_190045.length+0-1)-0];
						F.line = 213;
						var c_190228 = {heading: t_190214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_190214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_190235 = null;
							F.line = 155;
							var i_190458 = 0;
							F.line = 156;
							var l_190459 = (procs_190046 != null ? procs_190046.length : 0);
							L5: do {
								F.line = 157;
									L6: while (true) {
									if (!(i_190458 < l_190459)) break L6;
										F.line = 215;
										p_190235 = procs_190046[chckIndx(i_190458, 0, procs_190046.length+0-1)-0];
										if (!(p_190235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_190236 = p_190235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_190236 != null ? xx_190236.length : 0) == 1) && (xx_190236[chckIndx(0, 0, xx_190236.length+0-1)-0].textContent == t_190214.textContent))) {
										F.line = 220;
										var q_190244 = tree_189020(makeNimstrLit("A"), [text_189122(p_190235.title)]);
										F.line = 221;
										q_190244.setAttribute("href", p_190235.getAttribute("href"));
										F.line = 222;
										if (c_190228.kids != null) { c_190228.kids.push({heading: q_190244, kids: [], sortId: 0, doSort: false}); } else { c_190228.kids = [{heading: q_190244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_190235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 159;
										i_190458 = addInt(i_190458, 1);
										if (!(((procs_190046 != null ? procs_190046.length : 0) == l_190459))) {
										F.line = 160;
										failed_assert_impl_53035(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(160, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_190061.kids != null) { new_stuff_190061.kids.push(c_190228); } else { new_stuff_190061.kids = [c_190228]; };
						F.line = 159;
						i_190461 = addInt(i_190461, 1);
						if (!(((types_190045 != null ? types_190045.length : 0) == l_190462))) {
						F.line = 160;
						failed_assert_impl_53035(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(160, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_190047 = merge_tocs_189996(orig_190043, new_stuff_190061);
	framePtr = F.prev;

	return result_190047;

}

function add_189070(parent_189072, kid_189073) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_189072.nodeName == "TR")) Tmp1 = false; else {				if ((kid_189073.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_189073.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_189074 = document.createElement("TD");
		F.line = 19;
		k_189074.appendChild(kid_189073);
		F.line = 20;
		parent_189072.appendChild(k_189074);
		}
		else {
			F.line = 22;
		parent_189072.appendChild(kid_189073);
		}
		
	framePtr = F.prev;

	
}

function set_class_189088(e_189090, value_189091) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_189090.setAttribute("class", toJSStr(value_189091));
	framePtr = F.prev;

	
}

function to_html_189375(x_189377, is_root_189378) {
			var Tmp1;

		function HEX3Aanonymous_189418(a_189420, b_189421) {
					var Tmp1;

			var result_189422 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_189420.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_189421.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_189439 = a_189420.heading.textContent;
				F.line = 107;
				var y_189440 = b_189421.heading.textContent;
				if ((x_189439 < y_189440)) {
				F.line = 108;
				result_189422 = -1;
				break BeforeRet;
				}
				
				if ((y_189440 < x_189439)) {
				F.line = 109;
				result_189422 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_189422 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_189422 = subInt(a_189420.sortId, b_189421.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_189422;

		}

	var result_189379 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_189377 == null)) {
		F.line = 91;
		result_189379 = null;
		break BeforeRet;
		}
		
		if (((x_189377.kids != null ? x_189377.kids.length : 0) == 0)) {
		if ((x_189377.heading == null)) {
		F.line = 93;
		result_189379 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_189379 = x_189377.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_189379 = tree_189020(makeNimstrLit("DIV"), []);
			if (!!((x_189377.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_189377.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_189070(result_189379, x_189377.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_189415 = tree_189020(makeNimstrLit("UL"), []);
		if (is_root_189378) {
		F.line = 100;
		set_class_189088(ul_189415, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_189088(ul_189415, makeNimstrLit("simple"));
		}
		
		if (x_189377.doSort) {
		F.line = 104;
		x_189377.kids.sort(HEX3Aanonymous_189418);
		}
		
		L2: do {
			F.line = 115;
			var k_189614 = null;
			F.line = 153;
			var colontmp__190485 = null;
			F.line = 115;
			colontmp__190485 = x_189377.kids;
			F.line = 155;
			var i_190487 = 0;
			F.line = 156;
			var l_190488 = (colontmp__190485 != null ? colontmp__190485.length : 0);
			L3: do {
				F.line = 157;
					L4: while (true) {
					if (!(i_190487 < l_190488)) break L4;
						F.line = 115;
						k_189614 = colontmp__190485[chckIndx(i_190487, 0, colontmp__190485.length+0-1)-0];
						F.line = 116;
						var y_189615 = to_html_189375(k_189614, false);
						if (!((y_189615 == null))) {
						F.line = 118;
						add_189070(ul_189415, tree_189020(makeNimstrLit("LI"), [y_189615]));
						}
						
						F.line = 159;
						i_190487 = addInt(i_190487, 1);
						if (!(((colontmp__190485 != null ? colontmp__190485.length : 0) == l_190488))) {
						F.line = 160;
						failed_assert_impl_53035(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(160, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_189415.childNodes.length == 0))) {
		F.line = 119;
		add_189070(result_189379, ul_189415);
		}
		
		if ((result_189379.childNodes.length == 0)) {
		F.line = 120;
		result_189379 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_189379;

}

function replace_by_id_189142(id_189144, new_tree_189145) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_189146 = document.getElementById(id_189144);
		F.line = 33;
		x_189146.parentNode.replaceChild(new_tree_189145, x_189146);
		F.line = 34;
		new_tree_189145.id = id_189144;
	framePtr = F.prev;

	
}

function togglevis_190299(d_190301) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_190301.style.display == 'none')
      d_190301.style.display = 'inline';
    else
      d_190301.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_190317) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_190318 = document.getElementById("toc-list");
		if ((alternative_190285[0] == null)) {
		F.line = 240;
		var tt_190337 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_189673(toc_190318, tt_190337);
		F.line = 242;
		tt_190337 = tt_190337.kids[chckIndx(0, 0, tt_190337.kids.length+0-1)-0];
		F.line = 244;
		var types_190352 = [[]];
		F.line = 245;
		var procs_190367 = [[]];
		F.line = 247;
		extract_items_189307(tt_190337, "Types", types_190352, 0);
		F.line = 248;
		extract_items_189307(tt_190337, "Procs", procs_190367, 0);
		F.line = 249;
		extract_items_189307(tt_190337, "Converters", procs_190367, 0);
		F.line = 250;
		extract_items_189307(tt_190337, "Methods", procs_190367, 0);
		F.line = 251;
		extract_items_189307(tt_190337, "Templates", procs_190367, 0);
		F.line = 252;
		extract_items_189307(tt_190337, "Macros", procs_190367, 0);
		F.line = 253;
		extract_items_189307(tt_190337, "Iterators", procs_190367, 0);
		F.line = 255;
		var ntoc_190375 = build_toc_190041(tt_190337, types_190352[0], procs_190367[0]);
		F.line = 256;
		var x_190376 = to_html_189375(ntoc_190375, true);
		F.line = 257;
		alternative_190285[0] = tree_189020(makeNimstrLit("DIV"), [x_190376]);
		}
		
		if ((value_190317 == "type")) {
		F.line = 259;
		replace_by_id_189142("tocRoot", alternative_190285[0]);
		}
		else {
			F.line = 261;
		replace_by_id_189142("tocRoot", tree_189020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_190299(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_190491 = [null];
var contents_190493 = [null];
var oldtoc_190742 = [null];
var timer_190743 = [null];

function raiseRangeError() {
		var e_59425 = null;
		e_59425 = {m_type: NTI43862, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_59425.message = nimCopy(null, makeNimstrLit("value out of range"), NTI40040);
		e_59425.parent = null;
		raiseException(e_59425, "RangeError");

	
}

function nsuToLowerAsciiChar(c_177980) {
	var result_177981 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"../../lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_177980] != undefined)) {
		F.line = 222;
		result_177981 = chckRange(addInt(c_177980, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_177981 = c_177980;
		}
		
	framePtr = F.prev;

	return result_177981;

}

function fuzzy_match_188070(pattern_188072, str_188073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_188077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_188078 = -100;
		F.line = 38;
		var header_matched_188079 = false;
		F.line = 39;
		var unmatched_leading_char_count_188081 = 0;
		F.line = 40;
		var consecutive_match_count_188083 = 0;
		F.line = 41;
		var str_index_188085 = 0;
		F.line = 42;
		var pat_index_188087 = 0;
		F.line = 43;
		var score_188089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_188085 < (str_188073 != null ? str_188073.length : 0)) && (pat_index_188087 < (pattern_188072 != null ? pattern_188072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_188096 = nsuToLowerAsciiChar(pattern_188072.charCodeAt(chckIndx(pat_index_188087, 0, pattern_188072.length+0-1)-0));
						F.line = 52;
						var str_char_188097 = nsuToLowerAsciiChar(str_188073.charCodeAt(chckIndx(str_index_188085, 0, str_188073.length+0-1)-0));
						if ((ConstSet3[pattern_char_188096] != undefined)) {
						F.line = 56;
						pat_index_188087 = addInt(pat_index_188087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_188097] != undefined)) {
						F.line = 59;
						str_index_188085 = addInt(str_index_188085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_188079) && (str_char_188097 == 58))) {
						F.line = 65;
						header_matched_188079 = true;
						F.line = 66;
						score_state_188078 = -100;
						F.line = 67;
						score_188089 = Math.trunc(Math.floor((5.0000000000000000e-01 * score_188089)));
						F.line = 68;
						pat_index_188087 = 0;
						F.line = 69;
						str_index_188085 = addInt(str_index_188085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_188097 == pattern_char_188096)) {
						F.line = 73;
						switch (score_state_188078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_188078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_188078 = 5;
							F.line = 78;
							score_188089 = addInt(score_188089, score_state_188078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_188083 = addInt(consecutive_match_count_188083, 1);
							F.line = 82;
							score_state_188078 = 5;
							F.line = 83;
							score_188089 = addInt(score_188089, mulInt(5, consecutive_match_count_188083));
							if ((score_state_188078 == 10)) {
							F.line = 86;
							score_188089 = addInt(score_188089, 10);
							}
							
							F.line = 88;
							var on_boundary_188172 = (pat_index_188087 == (pattern_188072 != null ? (pattern_188072.length-1) : -1));
							if ((!(on_boundary_188172) && (str_index_188085 < (str_188073 != null ? (str_188073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_188173 = nsuToLowerAsciiChar(pattern_188072.charCodeAt(chckIndx(addInt(pat_index_188087, 1), 0, pattern_188072.length+0-1)-0));
							F.line = 92;
							var next_str_char_188174 = nsuToLowerAsciiChar(str_188073.charCodeAt(chckIndx(addInt(str_index_188085, 1), 0, str_188073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_188174] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_188174 == next_pattern_char_188173));							}							on_boundary_188172 = Tmp4;
							}
							
							if (on_boundary_188172) {
							F.line = 100;
							score_state_188078 = 20;
							F.line = 100;
							score_188089 = addInt(score_188089, score_state_188078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_188073.charCodeAt(chckIndx(subInt(str_index_188085, 1), 0, str_188073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_188073.charCodeAt(chckIndx(subInt(str_index_188085, 1), 0, str_188073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_188073.charCodeAt(chckIndx(str_index_188085, 0, str_188073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_188212 = Tmp5;
							if (is_leading_char_188212) {
							F.line = 110;
							score_state_188078 = 10;
							}
							else {
								F.line = 114;
								score_state_188078 = 0;
								F.line = 114;
								score_188089 = addInt(score_188089, score_state_188078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_188087 = addInt(pat_index_188087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_188078) {
							case -100:
								F.line = 120;
								score_state_188078 = -3;
								F.line = 120;
								score_188089 = addInt(score_188089, score_state_188078);
								break;
							case 5:
								F.line = 123;
								score_state_188078 = -1;
								F.line = 123;
								score_188089 = addInt(score_188089, score_state_188078);
								F.line = 124;
								consecutive_match_count_188083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_188081 < 3)) {
								F.line = 128;
								score_state_188078 = -3;
								F.line = 128;
								score_188089 = addInt(score_188089, score_state_188078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_188081 = addInt(unmatched_leading_char_count_188081, 1);
								break;
							default: 
								F.line = 132;
								score_state_188078 = -1;
								F.line = 132;
								score_188089 = addInt(score_188089, score_state_188078);
								break;
							}
						}
						
						F.line = 134;
						str_index_188085 = addInt(str_index_188085, 1);
					} while(false);
				}
		} while(false);
		F.line = 136;
		nimCopy(result_188077, {Field0: nimMax(0, score_188089), Field1: (0 < score_188089)}, NTI188074);
	framePtr = F.prev;

	return result_188077;

}

function text_189105(s_189107) {
	var result_189108 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_189108 = document.createTextNode(toJSStr(s_189107));
	framePtr = F.prev;

	return result_189108;

}

function dosearch_190510(value_190512) {

		function HEX3Aanonymous_190670(a_190679, b_190680) {
			var result_190684 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_190684 = subInt(b_190680["Field1"], a_190679["Field1"]);
			framePtr = F.prev;

			return result_190684;

		}

	var result_190513 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_190491[0] != null ? db_190491[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_190519 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_190519 = doc.documentElement;
    
		F.line = 286;
		db_190491[0] = nimCopy(null, stuff_190519.getElementsByClassName("reference"), NTI80245);
		F.line = 287;
		contents_190493[0] = nimCopy(null, [], NTI190532);
		L1: do {
			F.line = 288;
			var ahref_190614 = null;
			F.line = 155;
			var i_190811 = 0;
			F.line = 156;
			var l_190812 = (db_190491[0] != null ? db_190491[0].length : 0);
			L2: do {
				F.line = 157;
					L3: while (true) {
					if (!(i_190811 < l_190812)) break L3;
						F.line = 288;
						ahref_190614 = db_190491[0][chckIndx(i_190811, 0, db_190491[0].length+0-1)-0];
						F.line = 289;
						if (contents_190493[0] != null) { contents_190493[0].push(ahref_190614.getAttribute("data-doc-search-tag")); } else { contents_190493[0] = [ahref_190614.getAttribute("data-doc-search-tag")]; };
						F.line = 159;
						i_190811 = addInt(i_190811, 1);
						if (!(((db_190491[0] != null ? db_190491[0].length : 0) == l_190812))) {
						F.line = 160;
						failed_assert_impl_53035(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(160, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_190625 = tree_189020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_190513 = tree_189020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_189088(result_190513, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_190644 = [];
		L4: do {
			F.line = 294;
			var i_190656 = 0;
			F.line = 2217;
			var colontmp__190818 = 0;
			F.line = 294;
			colontmp__190818 = (db_190491[0] != null ? db_190491[0].length : 0);
			F.line = 2218;
			var i_190819 = 0;
			L5: do {
				F.line = 2219;
					L6: while (true) {
					if (!(i_190819 < colontmp__190818)) break L6;
						F.line = 294;
						i_190656 = i_190819;
						L7: do {
							F.line = 295;
							var c_190657 = contents_190493[0][chckIndx(i_190656, 0, contents_190493[0].length+0-1)-0];
							if (((c_190657 == "Examples") || (c_190657 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__190828 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_190658 = 0;
							F.line = 301;
							var matched_190659 = false;
							F.line = 301;
							nimCopy(colontmp__190828, fuzzy_match_188070(value_190512, c_190657), NTI188074);
							F.line = 301;
							score_190658 = colontmp__190828["Field0"];
							F.line = 301;
							matched_190659 = colontmp__190828["Field1"];
							if (matched_190659) {
							F.line = 303;
							if (matches_190644 != null) { matches_190644.push({Field0: db_190491[0][chckIndx(i_190656, 0, db_190491[0].length+0-1)-0], Field1: score_190658}); } else { matches_190644 = [{Field0: db_190491[0][chckIndx(i_190656, 0, db_190491[0].length+0-1)-0], Field1: score_190658}]; };
							}
							
						} while(false);
						F.line = 2221;
						i_190819 = addInt(i_190819, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_190644.sort(HEX3Aanonymous_190670);
		L8: do {
			F.line = 306;
			var i_190722 = 0;
			F.line = 2217;
			var colontmp__190824 = 0;
			F.line = 306;
			colontmp__190824 = nimMin((matches_190644 != null ? matches_190644.length : 0), 19);
			F.line = 2218;
			var i_190825 = 0;
			L9: do {
				F.line = 2219;
					L10: while (true) {
					if (!(i_190825 < colontmp__190824)) break L10;
						F.line = 306;
						i_190722 = i_190825;
						F.line = 307;
						matches_190644[chckIndx(i_190722, 0, matches_190644.length+0-1)-0]["Field0"].innerHTML = matches_190644[chckIndx(i_190722, 0, matches_190644.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_189070(ul_190625, tree_189020(makeNimstrLit("LI"), [matches_190644[chckIndx(i_190722, 0, matches_190644.length+0-1)-0]["Field0"]]));
						F.line = 2221;
						i_190825 = addInt(i_190825, 1);
					}
			} while(false);
		} while(false);
		if ((ul_190625.childNodes.length == 0)) {
		F.line = 310;
		add_189070(result_190513, tree_189020(makeNimstrLit("B"), [text_189105(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_189070(result_190513, tree_189020(makeNimstrLit("B"), [text_189105(makeNimstrLit("search results"))]));
			F.line = 313;
			add_189070(result_190513, ul_190625);
		}
		
	framePtr = F.prev;

	return result_190513;

}

function search() {

		function wrapper_190759() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_190761 = document.getElementById("searchInput");
				F.line = 321;
				var value_190762 = elem_190761.value;
				if (!(((value_190762 != null ? value_190762.length : 0) == 0))) {
				if ((oldtoc_190742[0] == null)) {
				F.line = 324;
				oldtoc_190742[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_190768 = dosearch_190510(value_190762);
				F.line = 326;
				replace_by_id_189142("tocRoot", results_190768);
				}
				else {
				if (!((oldtoc_190742[0] == null))) {
				F.line = 328;
				replace_by_id_189142("tocRoot", oldtoc_190742[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_190743[0] == null))) {
		F.line = 330;
		clearTimeout(timer_190743[0]);
		}
		
		F.line = 331;
		timer_190743[0] = setTimeout(wrapper_190759, 400);
	framePtr = F.prev;

	
}
